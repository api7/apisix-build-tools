ARG IMAGE_BASE="centos"
ARG IMAGE_TAG="7"

FROM ${IMAGE_BASE}:${IMAGE_TAG}

COPY ./utils/determine-dist.sh /determine-dist.sh

RUN set -x \
    # install dependency
    && yum install -y wget curl git which gcc make \
    && curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | tee /etc/yum.repos.d/yarn.repo \
    && sh -c "$(curl -fsSL https://rpm.nodesource.com/setup_14.x)" \
    && yum install -y nodejs yarn \
    && wget https://dl.google.com/go/go1.15.2.linux-amd64.tar.gz \
    && tar -xzf go1.15.2.linux-amd64.tar.gz \
    && mv go /usr/local

ARG checkout_v="v2.3"
ARG iteration="0"
ARG dashboard_repo="https://github.com/apache/apisix-dashboard.git"
ARG IMAGE_BASE
ARG IMAGE_TAG

ENV IMAGE_BASE=${IMAGE_BASE}
ENV IMAGE_TAG=${IMAGE_TAG}

RUN set -x \
    && mkdir -p /tmp/build/output/apisix/dashboard/usr/bin/ \
    && mkdir -p /tmp/build/output/apisix/dashboard/usr/local/apisix/dashboard/ \
    # config golang
    && export GO111MODULE=on \
    && export GOROOT=/usr/local/go \
    && export GOPATH=$HOME/gopath \
    && export PATH=$PATH:$GOROOT/bin:$GOPATH/bin \
    && cd $HOME \
    && mkdir gopath \
    && go env -w GOPROXY=https://goproxy.cn,direct \
    && cd /tmp/ \
    # get source code and build
    && git clone ${dashboard_repo} \
    && cd apisix-dashboard \
    && git checkout ${checkout_v} \
    && make build \
    # copy the compiled files to the specified directory for packaging
    && cp -r output/* /tmp/build/output/apisix/dashboard/usr/local/apisix/dashboard \
    # set the soft link for manager-api
    && ln -s /usr/local/apisix/dashboard/manager-api /tmp/build/output/apisix/dashboard/usr/bin/manager-api \
    # determine dist and write it into /tmp/dist file
    && /determine-dist.sh
