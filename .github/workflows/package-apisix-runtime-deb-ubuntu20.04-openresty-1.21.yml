name: package apisix-runtime deb for ubuntu 20.04 with openresty 1.21

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      BUILD_APISIX_RUNTIME_VERSION: 1.1.2
      ARCH : amd64
    strategy:
      matrix:
        platform:
           - linux/amd64
           - linux/arm64
    steps:
      - uses: actions/checkout@v2
        with:
          ref: openresty/1.21.4
      - name: set env.ARCH if platform.arch is aarch64
        run: |
          if [ "${{ matrix.platform }}" == "linux/arm64" ]; then
            echo "ARCH=arm64" >> $GITHUB_ENV
          fi
      - name: check arch
        run: |
          echo "ARCH: ${{ env.ARCH }}"
      - name: install dependencies
        run: |
          sudo apt-get install -y make ruby ruby-dev rubygems build-essential

      - name: build apisix-runtime deb
        run: |
          if [ "${{ matrix.platform }}" == "linux/arm64" ]; then
            make package type=deb app=apisix-runtime runtime_version=${BUILD_APISIX_RUNTIME_VERSION} image_base=arm64v8/ubuntu image_tag=20.04 arch=linux/arm64/v8
          else
            make package type=deb app=apisix-runtime runtime_version=${BUILD_APISIX_RUNTIME_VERSION} image_base=ubuntu image_tag=20.04 arch=linux/amd64
          fi

      - name: run ubuntu 20.04 docker and mapping apisix-runtime deb into container
        run: |
          if [ "${{ matrix.platform }}" == "linux/arm64" ]; then
            docker run -itd -v /home/runner/work/apisix-build-tools/apisix-build-tools/output:/output --name ubuntu20.04Instance --net="host" --platfrom linux/arm64/v8 docker.io/ubuntu:20.04 /bin/bash
          else
            docker run -itd -v /home/runner/work/apisix-build-tools/apisix-build-tools/output:/output --name ubuntu20.04Instance --net="host" --platfrom linux/amd64 docker.io/ubuntu:20.04 /bin/bash
          fi

      - name: install dependencies in container
        run: |
            docker exec ubuntu20.04Instance bash -c "DEBIAN_FRONTEND=noninteractive apt-get update"
            docker exec ubuntu20.04Instance bash -c "DEBIAN_FRONTEND=noninteractive apt-get install -y libreadline-dev lsb-release libssl-dev perl build-essential"
            docker exec ubuntu20.04Instance bash -c "DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends wget gnupg ca-certificates"
            docker exec ubuntu20.04Instance bash -c "wget -O - https://openresty.org/package/pubkey.gpg | apt-key add -"
            docker exec ubuntu20.04Instance bash -c 'echo "deb http://openresty.org/package/ubuntu $(lsb_release -sc) main" | tee /etc/apt/sources.list.d/openresty.list'
            docker exec ubuntu20.04Instance bash -c "DEBIAN_FRONTEND=noninteractive apt-get update"
            docker exec ubuntu20.04Instance bash -c "DEBIAN_FRONTEND=noninteractive apt-get -y install openresty-pcre openresty-zlib"
    
      - name: install deb in container
        run: |
          docker exec ubuntu20.04Instance bash -c "dpkg -i /output/apisix-runtime_${BUILD_APISIX_RUNTIME_VERSION}-0~ubuntu20.04_${{ env.ARCH }}.deb"

      - name: check and ensure apisix-runtime is installed
        run: |
          docker exec ubuntu20.04Instance bash -c "/usr/local/openresty/bin/etcdctl -h" || exit 1
          export APISIX_RUNTIME_VER=$(docker exec ubuntu20.04Instance bash -c "openresty -V" 2>&1 | awk '/-O2 -DAPISIX_RUNTIME_VER=/{print $5}' | awk -v FS="=" '{print $2}')
          if [ "$APISIX_RUNTIME_VER" != "${BUILD_APISIX_RUNTIME_VERSION}" ]; then exit 1; fi

      - name: Publish Artifact
        uses: actions/upload-artifact@v4.0.0
        with:
          name: apisix-runtime_${{ env.BUILD_APISIX_RUNTIME_VERSION }}-0~ubuntu20.04_${{ env.ARCH }}.deb
          path: output/apisix-runtime_${{ env.BUILD_APISIX_RUNTIME_VERSION }}-0~ubuntu20.04_${{ env.ARCH }}.deb
          retention-days: 5
          if-no-files-found: error